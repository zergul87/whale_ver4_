
import pandas as pd
from sklearn import datasets
from sklearn.model_selection import StratifiedKFold,train_test_split
from sklearn.preprocessing import MinMaxScaler
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import math
import random

def mcar_mask(df, missingproportion):  # MCAR mechanism delete values
    df_copy=df.copy()
    nan_mask = np.random.choice([True, False], size=df.shape, p=[missingproportion, (1 - missingproportion)])
    df_copy=df_copy.mask(nan_mask)
    all_nan = np.where(df_copy.isnull().all(1))
    for i in range(len(all_nan[0])):
        random_chosen = np.random.randint(0, df.shape[1])
        df_copy.iloc[all_nan[0][i], random_chosen] = df.iloc[i, random_chosen].copy()
    return df_copy


def nmar_mask(df, missingproportion):
    df_copy = df.copy()
    for feature in df_copy.columns.tolist():
        df_copy[feature][df_copy[feature] < df_copy[feature].quantile(missingproportion)] = float("NaN")
    all_nan = np.where(df_copy.isnull().all(1))
    for i in range(len(all_nan[0])):
        random_chosen = np.random.randint(0, df.shape[1])
        df_copy.iloc[all_nan[0][i], random_chosen] = df.iloc[i, random_chosen].copy()
    return df_copy


def mar_mask(df,missingproportion):

    df_copy = df.copy()
    corr = df_copy.corr().abs()

    pairs_count = math.floor(df.shape[1] / 2)



    for i in corr.columns:
        corr.iloc[i, i] = 0
    corr_copy = corr.copy()
    pairs = []
    while len(pairs) != pairs_count:
        b = pd.concat([corr.max(axis=0), corr.idxmax(axis=0)], axis=1)
        ind = b[0].idxmax()
        pairs.append([ind, b.loc[ind, 1]])
        corr.drop(index=b[0].idxmax(), columns=b.loc[ind, 1], inplace=True)
        corr.drop(index=b.loc[ind, 1], columns=b[0].idxmax(), inplace=True)
        del (b)
    if (df.shape[1] % 2) != 0:

        add_column = corr_copy.iloc[corr.columns.tolist()[0], :].idxmax(axis=1)
        for i in pairs:
            if add_column in i:
                i.append(corr.columns.tolist()[0])


    for i in (pairs):
        observed_feature = random.choice(i)
        df1 = pd.DataFrame(df, columns=i)

        if len(i)==2:
            df1 = df1[df1.loc[:, observed_feature] < df1.loc[:, observed_feature].quantile(2 * missingproportion)]
            for j in i:
                if j!=observed_feature:
                    miss_feature=j

            df1.loc[:,miss_feature]=float("NaN")
            df_copy.loc[df1.index.tolist(), [i[0], i[1]]] = df1.copy() #sÄ±rada hata olabilir
            del (df1)
        else: # feature number is even
            miss_features=[]
            df1 = df1[df1.loc[:, observed_feature] < df1.loc[:, observed_feature].quantile(1.5 * missingproportion)]
            for j in i:
                if j!=observed_feature:
                    miss_features.append(j)
            for j in miss_features:
                df1.loc[:, j] = float("NaN")
            df_copy.loc[df1.index.tolist(), [i[0], i[1],i[2]]] = df1.copy()

            del (df1)
    all_nan = np.where(df_copy.isnull().all(1)) #tum satirin NaN olmasini engeller
    for i in range(len(all_nan[0])):
        random_chosen = np.random.randint(0, df.shape[1])
        df_copy.iloc[all_nan[0][i], random_chosen] = df.iloc[i, random_chosen].copy()
    return df_copy
dataset_name = 'iris'

main_data = datasets.load_iris()
X = pd.DataFrame(main_data.data)

y = pd.DataFrame(main_data.target)
cv=StratifiedKFold(n_splits=10,shuffle=True,random_state=42)


missing_percentage_list_mcar = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]
missing_percentage_list_mar = [ 0.1 , 0.2, 0.3, 0.4]

xtickslabels = [x + 1 for x in range(X.shape[1])]

plt.rcParams.update({'font.size': 8})
plt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9, wspace=0.3, hspace=0.5)
missing_percentage_list=[]



# -----ecoli---------
"""dataset_name='ecoli'
X=pd.read_csv('ecoli.data',header=None,delimiter=r"\s+")
y=X.iloc[:,-1]
X=X.iloc[:,1:-1]
y.replace(y.unique().tolist(),[1,2,3,4,5,6,7,8],inplace=True)
print(X)
print(y)"""
# -----parkinsons---------
"""dataset_name='parkinsons'
X=pd.read_csv('parkinsons.data',delimiter=",")
y=X.pop('status')
X=X.iloc[:,1:]
#print (X.columns)"""
# -----spine---------
"""dataset_name='Spine'
X=pd.read_csv('Spine.csv',delimiter=",")
y=X.pop('Class_att')
y.replace(['Abnormal','Normal'],[1,0],inplace=True)
X=X.iloc[:,0:12]"""
# -----breast_cancer---------
"""main_data=datasets.load_breast_cancer()
dataset_name='breast_cancer'
X= pd.DataFrame(main_data.data)
y= pd.DataFrame(main_data.target)"""
# -----blood-transfusion---------
"""dataset_name='transfusion'
X=pd.read_csv('transfusion.data',delimiter=",")

y=X.pop('whether he/she donated blood in March 2007')
X=X.iloc[:,1:]"""
# -----wine---------
"""main_data=datasets.load_wine()
dataset_name='wine'
X= pd.DataFrame(main_data.data)

y= pd.DataFrame(main_data.target)"""
# -----pima_indian_diabets---------
"""dataset_name='diabetes'
X=pd.read_csv('diabetes.csv',delimiter=",")

y=X.pop('Outcome')
X=X.iloc[:,0:]"""

# -----breast_tissue---------
"""dataset_name='Breast_Tissue'
X=pd.read_csv('Breast_Tissue.csv',delimiter=",")

y=X.pop('Class')
y.replace(y.unique().tolist(),[0,1,2,3,4,5],inplace=True)
X=X.iloc[:,1:]"""

"""main_data = datasets.load_breast_cancer()
dataset_name = 'Breast_Cancer'
X = pd.DataFrame(main_data.data)
y = pd.DataFrame(main_data.target)"""
mechanism='MCAR'
if mechanism=='MCAR' or mechanism=='NMAR':
    missing_percentage_list=missing_percentage_list_mcar
elif mechanism=='MAR':
    missing_percentage_list = missing_percentage_list_mar
fig, axes = plt.subplots(len(missing_percentage_list), 10)
for i in range(len(missing_percentage_list)):
        exp_no=0
        print(i)
        for train_index,test_index in cv.split(X,y):
            X_train_main=X.iloc[train_index]
            X_test=X.iloc[test_index]
            y_train=y.iloc[train_index]
            y_test=y.iloc[test_index]
            #X_train_main_first, X_test_final, y_train_main_first, y_test_final = train_test_split(X, y, test_size=0.2,stratify=y, shuffle=True)
            #scaler = MinMaxScaler()
            #scaler.fit(X_train_main)
            #X_train_main = pd.DataFrame(scaler.transform(X_train_main), index=X_train_main.index,columns=X_train_main.columns)
            #X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X.columns)

            #X_train_main, X_test, y_train, y_test = train_test_split(X_train_main_first, y_train_main_first, test_size=0.25,stratify=y_train_main_first, shuffle=True)
            dfmain_csv = X_train_main

            #X_train=mar_mask(X_train_main, missing_percentage_list[i])

            X_train = nmar_mask(X_train_main, missing_percentage_list[i])
            #X_train = mcar_mask(X_train_main, missing_percentage_list[i])
            #X_train = mar_mask(X_train_main, missing_percentage_list[i])
            dimension = X_train.isnull().sum().sum()
            print(missing_percentage_list[i], dimension)

            # visualization
            axes[0, exp_no].set_title('Sample ' + str(exp_no + 1))
            coordinate = axes[i, exp_no]
            # sns.heatmap(X_train.isnull(),cbar=False,xticklabels=xtickslabels, yticklabels=False,ax=coordinate)
            sns.heatmap(X_train.isnull(), cbar=False, xticklabels=False, yticklabels=False, ax=coordinate)
            # plt.xticks(rotation=90)
            dftrain_csv = pd.concat([X_train, y_train], axis=1, ignore_index=True)
            dftest_csv = pd.concat([X_test, y_test], axis=1, ignore_index=True)
            #dftestfinal_csv = pd.concat([X_test_final, y_test_final], axis=1, ignore_index=True)
            dfmain_csv.to_csv(dataset_name + "_main_" + str(missing_percentage_list[i] * 100) + "_" + str(exp_no + 1))
            dftrain_csv.to_csv(dataset_name + "_train_" + str(missing_percentage_list[i] * 100) + "_" + str(exp_no + 1))
            dftest_csv.to_csv(dataset_name + "_test_" + str(missing_percentage_list[i] * 100) + "_" + str(exp_no + 1))
            exp_no+=1
            #dftestfinal_csv.to_csv(dataset_name + "_testfinal_" + str(missing_percentage_list[i] * 100) + "_" + str(j + 1))
# plt.yticks([])
fig.suptitle(dataset_name)
counter = 0
for ax in axes[:, 0]:
    ax.set_ylabel(str(int(missing_percentage_list[counter] * 100)) + "%" + "\n missing")
    counter += 1

fig.canvas.set_window_title(dataset_name)

# plt.tight_layout()
plt.show()
