import numpy as np
import pandas as pd
import math
import gc
from sklearn.svm import SVC
from fancyimpute import KNN
from sklearn.metrics import f1_score, matthews_corrcoef
from sklearn.metrics import accuracy_score,mean_absolute_error,mean_squared_error
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import cohen_kappa_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score
from sklearn.metrics import roc_auc_score
#from sklearn import datasets
from sklearn.model_selection import GridSearchCV
from scipy.spatial.distance import cdist
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.impute import SimpleImputer
import scipy.stats as stats
import time
timestr = time.strftime("%Y%m%d-%H%M%S")
dataset_name = "iris"
scaler_name='MinMax'
classifier_name='SVM'
#missing_percentage_list=[80.0]#,70.0,80.0]
#missing_percentage_list=[10.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0]
missing_percentage_list=[10.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0]
#missing_percentage_list=[10.0]#,10.0]#,10.0,10.0,10.0,10.0,10.0,10.0] 10.0,20.0,30.0,40.0,50.0,60.0,70.0
round_digit=5
results=[]
grid_svm = [{'kernel': ['rbf'], 'gamma': np.logspace(-3, 2, 6), 'C': np.logspace(-3, 2, 6)},
        {'kernel': ['linear'], 'C': np.logspace(-3, 2, 6)},
        {'kernel': ['poly'], 'gamma': np.logspace(-3, 2, 6), 'C': np.logspace(-3, 2, 6)}]
grid_logistic=[{'C':np.logspace(-3, 2, 6),'penalty':['l1','l2'],'solver':['liblinear']},
               {'C': np.logspace(-3, 2, 6), 'penalty': ['l2'], 'solver': ['newton-cg', 'lbfgs']}]
results.append(['Dataset','Missing_Percentage','ExperimentNo',
                "KNN_Accuracy_Train","KNN_Matthews_Corrcoef_Train","KNN_FScore_Micro__Train","KNN_FScore_Macro_Train","KNN_FScore_Weighted__Train","KNN_Accucary_Test","KNN_Matthews_Corrcoef_Test","KNN_FScore_Micro_Test","KNN_FScore_Macro_Test","KNN_FScore_Weighted_Test","KNN_MAE","KNN_MSE","KNN_RMSE",
                "MICE_Accuracy_Train","MICE_Matthews_Corrcoef_Train","MICE_FScore_Micro_Train","MICE_FScore_Macro_Train","MICE_FScore_Weighted_Train","MICE_Accuracy_Test","MICE_Matthews_Test","MICE_FScore_Micro_Test","MICE_FScore_Macro_Test","MICE_FScore_Weighted_Test","MICE_MAE","MICE_MSE","MICE_RMSE",
                "SVD_Accuracy_Train","SVD_Matthews_Validation_Train","SVD_FScore_Micro_Train","SVD_FScore_Macro_Train","SVD_FScore_Weighted_Train","SVD_Accuracy_Test","SVD_Matthews_Validation_Test","SVD_FScore_Micro_Test","SVD_FScore_Macro_Test","SVD_FScore_Weighted_Test","SVD_MAE","SVD_MSE","SVD_RMSE",
                "MEAN_Accuracy_Train","MEAN_Matthews_Validation", "MEAN_FScore_Micro_Train","MEAN_FScore_Macro_Train", "MEAN_FScore_Weighted_Train", "MEAN_Accuracy_Test","MEAN_Matthews_Test", "MEAN_FScore_Micro_Test", "MEAN_FScore_Macro_Test", "MEAN_FScore_Weighted_Test","MEAN_MAE","MEAN_MSE","MEAN_RMSE",

                "CLASSMEAN_Accuracy_Train", "CLASSMEAN__Matthews_Validation", "CLASSMEAN_FScore_Micro_Train", "CLASSMEAN_FScore_Macro_Train",
                "CLASSMEAN_FScore_Weighted_Train", "CLASSMEAN_Accuracy_Test", "CLASSMEAN_Matthews_Test", "CLASSMEAN_FScore_Micro_Test",
                "CLASSMEAN_FScore_Macro_Test", "CLASSMEAN_FScore_Weighted_Test", "CLASSMEAN_MAE","CLASSMEAN_MSE","CLASSMEAN_RMSE",


                "MAIN_Accuracy_Train", "MAIN__Matthews_Validation", "MAIN_FScore_Micro_Train", "MAIN_FScore_Macro_Train",
                "MAIN_FScore_Weighted_Train", "MAIN_Accuracy_Test", "MAIN_Matthews_Test", "MAIN_FScore_Micro_Test",
                "MAIN_FScore_Macro_Test", "MAIN_FScore_Weighted_Test"
                ])

best_parameters=[]
def classifier_selection(scaler_name, model, X_train_set, y_train_set, X_test_set):
    if scaler_name == 'MinMax':
        scaler_selection = MinMaxScaler()
        scaler_selection.fit(X_train_set)
        X_train_scaled = pd.DataFrame(scaler_selection.transform(X_train_set), index=X_train_set.index,
                                      columns=X_train_set.columns)

        X_test_scaled = pd.DataFrame(scaler_selection.transform(X_test_set), index=X_test_set.index,
                                     columns=X_test_set.columns)
    if scaler_name == 'StandardScaler':
        scaler_selection = StandardScaler()
        scaler_selection.fit(X_train_set)
        X_train_scaled = pd.DataFrame(scaler_selection.transform(X_train_set), index=X_train_set.index,
                                      columns=X_train_set.columns)

        X_test_scaled = pd.DataFrame(scaler_selection.transform(X_test_set), index=X_test_set.index,
                                     columns=X_test_set.columns)
    if scaler_name == 'None':
        X_train_scaled = X_train_set.copy()
        X_test_scaled = X_test_set.copy()

    if model == 'SVM':
        grid = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4], 'C': [1, 10, 100, 1000]},
                {'kernel': ['linear'], 'C': [1, 10, 100, 1000]},
                {'kernel': ['poly'], 'gamma': [1e-3, 1e-4], 'C': [1, 10, 100, 1000]}]
        grid_clf = GridSearchCV(SVC(), param_grid=grid, cv=10, scoring='accuracy', refit=True)
        grid_clf.fit(X_train_scaled, y_train_set)
        best_parameter_clf = SVC(**grid_clf.best_params_)

        model_svm = grid_clf.best_estimator_
        model_svm.fit(X_train_scaled, y_train_set)
        y_pred_train = model_svm.predict(X_train_scaled)
        y_pred_test = model_svm.predict(X_test_scaled)
    if model == 'LR':
        grid = [{'C': np.logspace(-3, 2, 6), 'penalty': ['l1', 'l2'], 'solver': ['liblinear']},
                {'C': np.logspace(-3, 2, 6), 'penalty': ['l2'], 'solver': ['newton-cg', 'lbfgs']}]
        grid_clf = GridSearchCV(LogisticRegression(), param_grid=grid, cv=10, scoring='accuracy', refit=True)
        grid_clf.fit(X_train_scaled, y_train_set)
        best_parameter_clf = LogisticRegression(**grid_clf.best_params_)
        model_lr = grid_clf.best_estimator_
        model_lr.fit(X_train_scaled, y_train_set)
        y_pred_train = model_lr.predict(X_train_scaled)
        y_pred_test = model_lr.predict(X_test_scaled)
    return y_pred_train, y_pred_test,best_parameter_clf


for missingpercentage in range(len(missing_percentage_list)):
    for experiment in range(1,11):
        X_train_main=pd.read_csv(dataset_name+'_main_'+str(missing_percentage_list[missingpercentage])+"_"+str(experiment))
        X_train_main=X_train_main.iloc[:,1:]#delete first column
        X_test=pd.read_csv(dataset_name+'_test_'+str(missing_percentage_list[missingpercentage])+"_"+str(experiment))
        y_test=X_test.iloc[:,-1]  #last column as a target
        X_test=X_test.iloc[:,1:-1] #delete first and last column
        X_train=pd.read_csv(dataset_name+'_train_'+str(missing_percentage_list[missingpercentage])+"_"+str(experiment))
        y_train=X_train.iloc[:,-1]  #last column as a target
        X_train=X_train.iloc[:,1:-1]
        dimension = X_train.isnull().sum().sum()
        ub = []  # where ub is the upper bound of variable n
        lb = []  # where lb is the lower bound of variable n



        best_param=classifier_selection(scaler_name,classifier_name,X_train_main,y_train,X_test)[2]
        best_parameters.append(best_param)







       
        
        X_train_mean = X_train.copy()
        X_test_mean = X_test.copy()
        imp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')
        X_train_fill_mean=imp_mean.fit_transform(X_train_mean)
        X_train_fill_mean = pd.DataFrame(X_train_fill_mean)
        #X_train_fill_mean.to_excel(dataset_name +classifier_name+ "kfold_mean_imputed_train" + str(missing_percentage_list[missingpercentage]) + "_" + str(experiment) + ".xls")


        scaler_mean=MinMaxScaler()
        scaler_mean.fit(X_train_fill_mean)
        X_train_fill_mean_scaled = pd.DataFrame(scaler_mean.transform(X_train_fill_mean), index=X_train_fill_mean.index,
                                               columns=X_train_fill_mean.columns)

        X_test_mean_scaled = pd.DataFrame(scaler_mean.transform(X_test_mean), index=X_test_mean.index,
                                         columns=X_test_mean.columns)

        model_mean = best_param
        model_mean.fit(X_train_fill_mean_scaled, y_train)
        y_pred_mean_train = model_mean.predict(X_train_fill_mean_scaled)
        y_pred_mean_test = model_mean.predict(X_test_mean_scaled)


       
        X_train_KNN=X_train.copy()
        X_test_KNN = X_test.copy()
        X_train_fill_KNN = KNN(k=1).fit_transform(X_train_KNN)
        X_train_fill_KNN=pd.DataFrame(X_train_fill_KNN)
        #X_train_fill_KNN.to_excel(dataset_name +classifier_name+ "kfold_KNN_imputed_train" + str(missing_percentage_list[missingpercentage]) + "_" + str(experiment) + ".xls")
        scaler_KNN=MinMaxScaler()
        scaler_KNN.fit(X_train_fill_KNN)
        X_train_fill_KNN_scaled = pd.DataFrame(scaler_KNN.transform(X_train_fill_KNN), index=X_train_fill_KNN.index,
                                               columns=X_train_fill_KNN.columns)

        X_test_KNN_scaled = pd.DataFrame(scaler_KNN.transform(X_test_KNN), index=X_test_KNN.index,
                                         columns=X_test_KNN.columns)

        model_knn = best_param
        model_knn.fit(X_train_fill_KNN_scaled, y_train)
        y_pred_knn_train = model_knn.predict(X_train_fill_KNN_scaled)
        y_pred_knn_test=model_knn.predict(X_test_KNN_scaled)


        from fancyimpute import IterativeImputer
        X_train_MICE = X_train.copy()
        X_test_MICE= X_test.copy()
        n_imputations = 5
        X_train_fill_Iterative = []
        for i in range(n_imputations):
            imputer = IterativeImputer(n_iter=5, sample_posterior=True, random_state=i)
            X_train_fill_Iterative.append(imputer.fit_transform(X_train_MICE))
        X_train_fill_MICE = np.mean(X_train_fill_Iterative, 0)


        X_train_fill_MICE=pd.DataFrame(X_train_fill_MICE)
        #X_train_fill_MICE.to_excel(dataset_name +classifier_name +"kfold_MICE_imputed_train" + str(missing_percentage_list[missingpercentage]) + "_" + str(experiment) + ".xls")

        scaler_MICE = MinMaxScaler()
        scaler_MICE.fit(X_train_fill_MICE)
        X_train_fill_MICE_scaled = pd.DataFrame(scaler_MICE.transform(X_train_fill_MICE), index=X_train_fill_MICE.index,
                                               columns=X_train_fill_MICE.columns)
        #X_test_MICE_scaled = pd.DataFrame(scaler_MICE.transform(X_test), index=X_test.index,columns=X_test.columns)
        X_test_MICE_scaled = pd.DataFrame(scaler_MICE.transform(X_test_MICE), index=X_test_MICE.index,
                                               columns=X_test_MICE.columns)

        model_MICE = best_param

        model_MICE.fit(X_train_fill_MICE_scaled, y_train)
        y_pred_mice_train = model_MICE.predict(X_train_fill_MICE_scaled)
        y_pred_mice_test = model_MICE.predict(X_test_MICE_scaled)
       

        from fancyimpute import SoftImpute, BiScaler
        X_train_SVD = X_train.copy()
        X_test_SVD= X_test.copy()

        # X_incomplete_normalized = BiScaler().fit_transform(X_train)
        X_train_fill_SVD = SoftImpute().fit_transform(X_train_SVD)
        X_train_fill_SVD=pd.DataFrame(X_train_fill_SVD)
        #X_train_fill_SVD.to_excel(dataset_name +classifier_name + "kfold_SVD_imputed_train" + str(missing_percentage_list[missingpercentage]) + "_" + str(experiment) + ".xls")
        scaler_SVD = MinMaxScaler()
        scaler_SVD.fit(X_train_fill_SVD)
        X_train_fill_SVD_scaled = pd.DataFrame(scaler_SVD.transform( X_train_fill_SVD), index= X_train_fill_SVD.index,
                                                columns= X_train_fill_SVD.columns)
        X_test_SVD_scaled = pd.DataFrame(scaler_SVD.transform(X_test), index=X_test.index,
                                          columns=X_test.columns)
        X_test_final_SVD_scaled = pd.DataFrame(scaler_SVD.transform(X_test_SVD), index=X_test_SVD.index,
                                                columns=X_test_SVD.columns)

        model_SVD = best_param
        model_SVD.fit(X_train_fill_SVD_scaled , y_train)
        y_pred_SVD_train= model_SVD.predict(X_train_fill_SVD_scaled)
        y_pred_SVD_test = model_SVD.predict(X_test_final_SVD_scaled)
        

        #class based mean
        X_train_class_mean = X_train.copy()
        X_test_class_mean = X_test.copy()
        X_train_fill_class_mean = X_train.copy()
        X = X_train.copy()
        X['target'] = y_train
        print(X['target'].unique().tolist())
        class_mean = [[X.iloc[:, j].groupby(X.iloc[:, -1]).mean().tolist()[i] for j in range(X_train.shape[1])] for i in
                      (X['target'].unique().tolist())]

        counter = -1
        for i in range(X_train.shape[0]):
            for j in range(X_train.shape[1]):
                if pd.isnull(X_train.iloc[i, j]) == True:
                    counter = counter + 1
                    class_index = y_train[i]
                    X_train_fill_class_mean.iloc[i, j] = class_mean[class_index][j]
        if X_train_fill_class_mean.isnull().sum().any() == True:
            for col in X_train_fill_class_mean.columns:
                X_train_fill_class_mean[col].fillna(X_train_fill_class_mean[col].mean(), inplace=True)




        #X_train_fill_class_mean.to_excel(dataset_name +classifier_name+ "kfold_classmean_imputed_train" + str(missing_percentage_list[missingpercentage]) + "_" + str(experiment) + ".xls")

        scaler_class_mean = MinMaxScaler()
        scaler_class_mean.fit(X_train_fill_class_mean)
        X_train_fill_class_mean_scaled = pd.DataFrame(scaler_class_mean.transform(X_train_fill_class_mean), index=X_train_fill_class_mean.index,
                                               columns=X_train_fill_class_mean.columns)

        X_test_fill_class_mean_scaled = pd.DataFrame(scaler_class_mean.transform(X_test_class_mean), index=X_test_class_mean.index,
                                         columns=X_test_class_mean.columns)

        model_class_mean = best_param
        model_class_mean.fit(X_train_fill_class_mean_scaled, y_train)
        y_pred_class_mean_train = model_class_mean.predict(X_train_fill_class_mean_scaled)
        y_pred_class_mean_test = model_class_mean.predict(X_test_fill_class_mean_scaled)

        scaler_main=MinMaxScaler()
        scaler_main.fit(X_train_main)
        X_train_main_scaled=pd.DataFrame(scaler_class_mean.transform(X_train_main), index=X_train_main.index,
                                               columns=X_train_main.columns)
        X_test_main_scaled = pd.DataFrame(scaler_class_mean.transform(X_test),
                                                     index=X_test.index,
                                                     columns=X_test.columns)
        model_main=best_param
        model_main.fit(X_train_main_scaled, y_train)
        y_pred_main=model_main.predict(X_test_main_scaled)
        y_pred_main_train = model_class_mean.predict(X_train_main_scaled)
        y_pred_main_test = model_class_mean.predict(X_test_main_scaled)



        results.append([dataset_name, missing_percentage_list[missingpercentage], experiment,
                        accuracy_score(y_train,y_pred_knn_train),
                        matthews_corrcoef(y_train,y_pred_knn_train),
                        f1_score(y_train, y_pred_knn_train,average= 'micro'),
                        f1_score(y_train, y_pred_knn_train,average= 'macro'),
                        f1_score(y_train, y_pred_knn_train,average= 'weighted'),
                        accuracy_score(y_test, y_pred_knn_test),
                        matthews_corrcoef(y_test, y_pred_knn_test),
                        f1_score(y_test, y_pred_knn_test,average= 'micro'),
                        f1_score(y_test, y_pred_knn_test,average= 'macro'),
                        f1_score(y_test, y_pred_knn_test,average= 'weighted'),
                        mean_absolute_error(X_train_main, X_train_fill_KNN),
                        mean_squared_error(X_train_main, X_train_fill_KNN,squared=True),
                        mean_squared_error(X_train_main, X_train_fill_KNN, squared=False),




                        accuracy_score(y_train, y_pred_mice_train),
                        matthews_corrcoef(y_train, y_pred_mice_train),
                        f1_score(y_train, y_pred_mice_train, average='micro'),
                        f1_score(y_train, y_pred_mice_train,average= 'macro'),
                        f1_score(y_train, y_pred_mice_train, average='weighted'),
                        accuracy_score(y_test, y_pred_mice_test),
                        matthews_corrcoef(y_test, y_pred_mice_test),
                        f1_score(y_test, y_pred_mice_test,average= 'micro'),
                        f1_score(y_test, y_pred_mice_test, average='macro'),
                        f1_score(y_test, y_pred_mice_test, average='weighted'),
                        mean_absolute_error(X_train_main, X_train_fill_MICE),
                        mean_squared_error(X_train_main, X_train_fill_MICE,squared=True),
                        mean_squared_error(X_train_main, X_train_fill_MICE, squared=False),

                        accuracy_score(y_train, y_pred_SVD_train),
                        matthews_corrcoef(y_train, y_pred_SVD_train),
                        f1_score(y_train, y_pred_SVD_train, average='micro'),
                        f1_score(y_train, y_pred_SVD_train,average= 'macro'),
                        f1_score(y_train, y_pred_SVD_train, average='weighted'),
                        accuracy_score(y_test, y_pred_SVD_test),
                        matthews_corrcoef(y_test, y_pred_SVD_test),
                        f1_score(y_test, y_pred_SVD_test, average='micro'),
                        f1_score(y_test, y_pred_SVD_test, average='macro'),
                        f1_score(y_test, y_pred_SVD_test, average='weighted'),
                        mean_absolute_error(X_train_main, X_train_fill_SVD),
                        mean_squared_error(X_train_main, X_train_fill_SVD,squared=True),
                        mean_squared_error(X_train_main, X_train_fill_SVD, squared=False),



                        accuracy_score(y_train, y_pred_mean_train),
                        matthews_corrcoef(y_train, y_pred_mean_train),
                        f1_score(y_train, y_pred_mean_train, average='micro'),
                        f1_score(y_train, y_pred_mean_train, average='macro'),
                        f1_score(y_train, y_pred_mean_train, average='weighted'),
                        accuracy_score(y_test, y_pred_mean_test),
                        matthews_corrcoef(y_test, y_pred_mean_test),
                        f1_score(y_test, y_pred_mean_test, average='micro'),
                        f1_score(y_test, y_pred_mean_test, average='macro'),
                        f1_score(y_test, y_pred_mean_test, average='weighted'),
                        mean_absolute_error(X_train_main, X_train_fill_mean),
                        mean_squared_error(X_train_main, X_train_fill_mean,squared=True),
                        mean_squared_error(X_train_main, X_train_fill_mean, squared=False),



                        accuracy_score(y_train, y_pred_class_mean_train),
                        matthews_corrcoef(y_train, y_pred_class_mean_train),
                        f1_score(y_train, y_pred_class_mean_train, average='micro'),
                        f1_score(y_train, y_pred_class_mean_train, average='macro'),
                        f1_score(y_train, y_pred_class_mean_train, average='weighted'),
                        accuracy_score(y_test, y_pred_class_mean_test),
                        matthews_corrcoef(y_test, y_pred_class_mean_test),
                        f1_score(y_test, y_pred_class_mean_test, average='micro'),
                        f1_score(y_test, y_pred_class_mean_test, average='macro'),
                        f1_score(y_test, y_pred_class_mean_test, average='weighted'),
                        mean_absolute_error(X_train_main, X_train_fill_class_mean),
                        mean_squared_error(X_train_main, X_train_fill_class_mean,squared=True),
                        mean_squared_error(X_train_main, X_train_fill_class_mean, squared=False),

                        accuracy_score(y_train, y_pred_main_train),
                        matthews_corrcoef(y_train, y_pred_main_train),
                        f1_score(y_train, y_pred_main_train, average='micro'),
                        f1_score(y_train, y_pred_main_train, average='macro'),
                        f1_score(y_train, y_pred_main_train, average='weighted'),
                        accuracy_score(y_test, y_pred_main_test),
                        matthews_corrcoef(y_test, y_pred_main_test),
                        f1_score(y_test, y_pred_main_test, average='micro'),
                        f1_score(y_test, y_pred_main_test, average='macro'),
                        f1_score(y_test, y_pred_main_test, average='weighted')


                        ])


result=pd.DataFrame(results)
best_parameters_df=pd.DataFrame(best_parameters)
best_parameters_df.to_excel("woa_results_kfold_startmean_bench"+dataset_name+classifier_name+"parameters"+"_"+timestr+".xlsx")
result.to_excel('resultsbench_kfold'+dataset_name+classifier_name+timestr+'.xlsx')




#print (stats.chisquare(X_train_fill_KNN,X_train_main))
